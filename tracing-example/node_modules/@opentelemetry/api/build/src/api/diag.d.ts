import { DiagLogger, DiagLogFunction } from '../diag/logger';
import { DiagLogLevel } from '../diag/logLevel';
/**
 * Singleton object which represents the entry point to the OpenTelemetry internal
 * diagnostic API
 */
export declare class DiagAPI implements DiagLogger {
    /** Get the singleton instance of the DiagAPI API */
    static instance(): DiagAPI;
    /**
     * Private internal constructor
     * @private
     */
    private constructor();
    /**
     * Return the currently configured logger instance, if no logger has been configured
     * it will return itself so any log level filtering will still be applied in this case.
     */
    getLogger: () => DiagLogger;
    /**
     * Set the DiagLogger instance
     * @param logger - [Optional] The DiagLogger instance to set as the default logger, if not provided it will set it back as a noop
     * @returns The previously registered DiagLogger
     */
    setLogger: (logger?: DiagLogger) => DiagLogger;
    /** Set the default maximum diagnostic logging level */
    setLogLevel: (maxLogLevel: DiagLogLevel) => void;
    verbose: DiagLogFunction;
    debug: DiagLogFunction;
    info: DiagLogFunction;
    warn: DiagLogFunction;
    error: DiagLogFunction;
}
//# sourceMappingURL=diag.d.ts.map