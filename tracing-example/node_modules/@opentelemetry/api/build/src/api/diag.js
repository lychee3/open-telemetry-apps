"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.DiagAPI = void 0;
var logger_1 = require("../diag/logger");
var logLevel_1 = require("../diag/logLevel");
var global_utils_1 = require("./global-utils");
/** Internal simple Noop Diag API that returns a noop logger and does not allow any changes */
function noopDiagApi() {
    var noopApi = logger_1.createNoopDiagLogger();
    noopApi.getLogger = function () { return noopApi; };
    noopApi.setLogger = noopApi.getLogger;
    noopApi.setLogLevel = function () { };
    return noopApi;
}
/**
 * Singleton object which represents the entry point to the OpenTelemetry internal
 * diagnostic API
 */
var DiagAPI = /** @class */ (function () {
    /**
     * Private internal constructor
     * @private
     */
    function DiagAPI() {
        var _logLevel = logLevel_1.DiagLogLevel.INFO;
        var _filteredLogger;
        var _logger = logger_1.createNoopDiagLogger();
        function _logProxy(funcName) {
            return function () {
                var orgArguments = arguments;
                var theLogger = _filteredLogger || _logger;
                var theFunc = theLogger[funcName];
                if (typeof theFunc === 'function') {
                    return theFunc.apply(theLogger, orgArguments);
                }
            };
        }
        // Using self local variable for minification purposes as 'this' cannot be minified
        var self = this;
        // DiagAPI specific functions
        self.getLogger = function () {
            // Return itself if no existing logger is defined (defaults effectively to a Noop)
            return _logger;
        };
        self.setLogger = function (logger) {
            var prevLogger = _logger;
            if (!logger || logger !== self) {
                // Simple special case to avoid any possible infinite recursion on the logging functions
                _logger = logger || logger_1.createNoopDiagLogger();
                _filteredLogger = logLevel_1.createLogLevelDiagLogger(_logLevel, _logger);
            }
            return prevLogger;
        };
        self.setLogLevel = function (maxLogLevel) {
            if (maxLogLevel !== _logLevel) {
                _logLevel = maxLogLevel;
                if (_logger) {
                    _filteredLogger = logLevel_1.createLogLevelDiagLogger(maxLogLevel, _logger);
                }
            }
        };
        for (var i = 0; i < logger_1.diagLoggerFunctions.length; i++) {
            var name_1 = logger_1.diagLoggerFunctions[i];
            self[name_1] = _logProxy(name_1);
        }
    }
    /** Get the singleton instance of the DiagAPI API */
    DiagAPI.instance = function () {
        var _a;
        var theInst = null;
        if (global_utils_1._global[global_utils_1.GLOBAL_DIAG_LOGGER_API_KEY]) {
            // Looks like a previous instance was set, so try and fetch it
            theInst = (_a = global_utils_1._global[global_utils_1.GLOBAL_DIAG_LOGGER_API_KEY]) === null || _a === void 0 ? void 0 : _a.call(global_utils_1._global, global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION);
        }
        if (!theInst) {
            theInst = new DiagAPI();
            global_utils_1._global[global_utils_1.GLOBAL_DIAG_LOGGER_API_KEY] = global_utils_1.makeGetter(global_utils_1.API_BACKWARDS_COMPATIBILITY_VERSION, theInst, noopDiagApi());
        }
        return theInst;
    };
    return DiagAPI;
}());
exports.DiagAPI = DiagAPI;
//# sourceMappingURL=diag.js.map