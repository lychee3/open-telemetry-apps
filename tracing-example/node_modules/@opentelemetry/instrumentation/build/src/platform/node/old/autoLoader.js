"use strict";
/*
 * Copyright The OpenTelemetry Authors
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.loadOldPlugins = exports.DEFAULT_INSTRUMENTATION_PLUGINS = void 0;
const PluginLoader_1 = require("./PluginLoader");
/** List of all default supported plugins */
exports.DEFAULT_INSTRUMENTATION_PLUGINS = {
    mongodb: { enabled: true, path: '@opentelemetry/plugin-mongodb' },
    grpc: { enabled: true, path: '@opentelemetry/plugin-grpc' },
    '@grpc/grpc-js': { enabled: true, path: '@opentelemetry/plugin-grpc-js' },
    http: { enabled: true, path: '@opentelemetry/plugin-http' },
    https: { enabled: true, path: '@opentelemetry/plugin-https' },
    mysql: { enabled: true, path: '@opentelemetry/plugin-mysql' },
    pg: { enabled: true, path: '@opentelemetry/plugin-pg' },
    redis: { enabled: true, path: '@opentelemetry/plugin-redis' },
    ioredis: { enabled: true, path: '@opentelemetry/plugin-ioredis' },
    'pg-pool': { enabled: true, path: '@opentelemetry/plugin-pg-pool' },
    express: { enabled: true, path: '@opentelemetry/plugin-express' },
    '@hapi/hapi': { enabled: true, path: '@opentelemetry/hapi-instrumentation' },
    koa: { enabled: true, path: '@opentelemetry/koa-instrumentation' },
    dns: { enabled: true, path: '@opentelemetry/plugin-dns' },
};
/**
 * Loads provided node plugins
 * @param pluginsNode
 * @param pluginsWeb
 * @param tracerProvider
 * @return returns function to disable all plugins
 */
function loadOldPlugins(pluginsNode, pluginsWeb, tracerProvider) {
    const allPlugins = mergePlugins(exports.DEFAULT_INSTRUMENTATION_PLUGINS, pluginsNode);
    const pluginLoader = new PluginLoader_1.PluginLoader(tracerProvider);
    pluginLoader.load(allPlugins);
    return () => {
        pluginLoader.unload();
    };
}
exports.loadOldPlugins = loadOldPlugins;
function mergePlugins(defaultPlugins, userSuppliedPlugins) {
    const mergedUserSuppliedPlugins = {};
    for (const pluginName in userSuppliedPlugins) {
        mergedUserSuppliedPlugins[pluginName] = Object.assign(Object.assign({}, (exports.DEFAULT_INSTRUMENTATION_PLUGINS[pluginName] || { enabled: true })), userSuppliedPlugins[pluginName]);
    }
    const mergedPlugins = Object.assign(Object.assign({}, defaultPlugins), mergedUserSuppliedPlugins);
    return mergedPlugins;
}
//# sourceMappingURL=autoLoader.js.map